#!/usr/bin/env perl
use Mojolicious::Lite;
use Mojo::JSON;
use Data::Dumper;

my $config = plugin Config => {
    file      => 'etc/oncall.conf',
    stash_key => 'conf'
};

plugin 'CouchUser', $config->{couch};
plugin 'CouchAuth', $config->{couch};
plugin 'MicroPage', $config->{couch};
plugin 'FormValidate';
plugin 'Mail',   $config->{mail};
plugin 'OnCall', $config->{couch};
plugin 'Notify::HipChat', $config->{hipchat};

get '/' => sub {
    my $self = shift;
    $self->render('index');
};

### login handling ###
get '/login' => sub {
    my ($self) = @_;
    $self->redirect_to('dashboard') if $self->auth();
};

post '/login' => sub {
    my $self = shift;

    $self->auth();
    $self->redirect_to('/dashboard');
};

get '/logout' => sub {
    my $self = shift;
    $self->session(expires => 1);
    $self->redirect_to('/');
};

post '/signup' => sub {
    my $self = shift;

    my $params = $self->process_form() || return;

    my $user = $self->signup_user($params);
    unless ($user) {
        $self->redirect_to('/login');
        return;
    }
    $self->redirect_to('/dashboard');
};

### password reset stuff ###
get '/reset_password';

get '/reset_password/:id' => sub {
    my $self = shift;

    my $reset = $self->get_password_reset($self->param('id'));
    if ($reset) {
        $self->stash(reset_request => $reset);
    }
    else {
        $self->flash(
            error => "We could not find your password reset request." . " "
                . "Maybe it expired or it was used already.");
        $self->redirect_to('/');
    }
} => 'update_password';

post '/reset_password' => sub {
    my $self = shift;

    if (my $reply = $self->add_password_reset()) {
        $self->stash(mail => $reply->{user}->{username});

        # TODO this should go into a template
        $self->mail(
            to      => $reply->{user}->{username},
            subject => 'Password reset request for: '
                . $reply->{user}->{username},
            data => "Hi,\n\nWe received a password reset request for your "
                . $self->{config}->{site}->{name}
                . " user account. If you want to reset your password now please"
                . " click on the following link:\n\n "
                . $self->{config}->{site}->{url}
                . "/reset_password/"
                . $reply->{id}
                . "\n\nCheers!\nYour '"
                . $self->{config}->{site}->{name}
                . "' team.\n",
        );
        $self->flash(message => "Your reset password request was sent to: "
                . $reply->{user}->{username});
        $self->redirect_to('/');
    }
    else {
        $self->flash(
            error => 'We could not find your account with the username: '
                . $self->param('username'));
        $self->redirect_to('/reset_password');
    }
};

post '/reset_password/:id' => sub {
    my $self = shift;

    $self->update_password();
    $self->expire_password_reset($self->param('id'));
    $self->flash(message => 'Your password was updated successfully');
    $self->redirect_to('/login');
};

# required for auth providers with callbacks (any OAuth like facebook, twitter)
get '/auth' => sub {
    my $self = shift;

    if ($self->auth()) {
        $self->redirect_to(delete $self->session->{initial_page});
    }
    else {
        $self->flash(error => "Authentication failed");
        $self->redirect_to('/');
    }
};

# accept notifications
post '/add/:id' => sub {
    my ($self) = @_;

    unless($self->is_valid_source($self->param('id'))){
        $self->render_json({error => 'Not a valid notification source'});
        return;
    }
    my $json = Mojo::JSON->new();
    app->log->debug(Dumper($self->req->params->to_hash));
    my $doc = $json->decode($self->param('payload'));
    if($doc){
        $doc->{source} = $self->param('id');
        my $id = $self->add_notify($doc);
        $self->notify_eventually($doc);
        $self->render_json({success => $id});
    }
    $self->render_json({error => 'Did not receive valid JSON'});
};

# Authenticated user section
group {
    under sub {
        my $self = shift;

        # Authenticated
        return 1 if $self->auth();

        # Not authenticated
        if ($self->stash('format') eq 'json') {
            $self->render(
                json   => { error => "Wrong username or password!" },
                status => 402,
            );
            return;
        }
        $self->flash(error => "Wrong username or password!");

        # change redirect to 'auth' to make it work with an OAuth provider
        #$self->redirect_to('auth');
        $self->redirect_to('login');

        return;
    };

    # user dashboard
    get '/dashboard' => sub {
        my $self = shift;

        $self->stash(notifies => $self->get_notifies(10) || []);
    };

    get '/profile' => sub {
        my $self = shift;
        $self->stash(user => $self->get_user());
    } => 'profile';

    post '/profile' => sub {
        my $self = shift;

        unless ($self->update_user()) {
            $self->flash(error => "Could not update Profile!");
            $self->redirect_to('/profile');
            return;
        }

        $self->flash(message => "Successfully updated your Profile!");
        $self->redirect_to('/dashboard');
    };

    get '/sources' => sub {
        my $self = shift;

        $self->stash(sources => $self->get_notify_sources() || {});
    };

    post '/sources' => sub {
        my ($self) = shift;

        my $params = $self->process_form() || return;
        $self->create_notify_source($params);
        $self->redirect_to('/sources');
    };

};

# Admin section
group {
    under '/admin' => sub {
        my $self = shift;

        # Authenticated
        return 1 if ($self->auth() and $self->session->{admin});

        # Not authenticated
        if ($self->stash('format') eq 'json') {
            $self->render(
                json   => { error => "Wrong username or password!" },
                status => 402,
            );
            return;
        }
        else {
            $self->flash(error => "Wrong username or password!");
            $self->redirect_to('login');
        }
        return;
    };

    # /admin/dashboard
    get '/dashboard' => sub {
        my $self = shift;
    };

    # /admin/edit
    get '/edit' => sub {
        my $self = shift;

        $self->stash(page => {});
    };

    post '/edit' => sub {
        my $self = shift;

        my $path = $self->create_content($self->req->params->to_hash());
        $self->redirect_to('/' . $path);
    };

    # /admin/edit/<page>
    get '/edit/*chunk' => sub {
        my $self = shift;

        $self->stash(page => $self->get_content($self->param('chunk'), 'raw'));
    } => 'admin/edit';

    post '/edit/*chunk' => sub {
        my $self = shift;

        $self->update_content($self->param('chunk'),
            $self->req->params->to_hash());
        $self->redirect_to('/' . $self->param('chunk'));
    };

    # /admin/delete/<page>
    post '/delete/*chunk' => sub {
        my $self = shift;

        $self->delete_content($self->param('chunk'));
        $self->flash(
            message => "Successfully deleted " . $self->param('chunk'));
        $self->redirect_to('/admin/dashboard');
    };
};

# fallback for CMS pages
get '/*chunk' => sub {
    my $self = shift;

    my $page = $self->get_content($self->param('chunk'));
    $self->stash(page => $page);
    $self->stash(template => $page->{type} || '404');
};

app->start;
